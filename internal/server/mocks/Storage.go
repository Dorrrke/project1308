// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "github.com/Dorrrke/project1308/internal/domain/cars/models"
	mock "github.com/stretchr/testify/mock"

	usermodels "github.com/Dorrrke/project1308/internal/domain/user/models"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddCar provides a mock function with given fields: _a0
func (_m *Storage) AddCar(_a0 models.Car) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddCar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Car) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCars provides a mock function with no fields
func (_m *Storage) GetAllCars() ([]models.Car, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCars")
	}

	var r0 []models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Car, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Car); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableCars provides a mock function with no fields
func (_m *Storage) GetAvailableCars() ([]models.Car, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableCars")
	}

	var r0 []models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Car, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Car); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarByID provides a mock function with given fields: _a0
func (_m *Storage) GetCarByID(_a0 string) (models.Car, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCarByID")
	}

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Car, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) models.Car); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userReq
func (_m *Storage) GetUser(userReq usermodels.UserRequest) (usermodels.User, error) {
	ret := _m.Called(userReq)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 usermodels.User
	var r1 error
	if rf, ok := ret.Get(0).(func(usermodels.UserRequest) (usermodels.User, error)); ok {
		return rf(userReq)
	}
	if rf, ok := ret.Get(0).(func(usermodels.UserRequest) usermodels.User); ok {
		r0 = rf(userReq)
	} else {
		r0 = ret.Get(0).(usermodels.User)
	}

	if rf, ok := ret.Get(1).(func(usermodels.UserRequest) error); ok {
		r1 = rf(userReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: uid
func (_m *Storage) GetUserByID(uid string) (usermodels.User, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 usermodels.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (usermodels.User, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(string) usermodels.User); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(usermodels.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: user
func (_m *Storage) SaveUser(user usermodels.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(usermodels.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAvailable provides a mock function with given fields: _a0
func (_m *Storage) UpdateAvailable(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvailable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
